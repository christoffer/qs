#pragma once

#include "string.h"

struct VarList {
    String name = 0;
    String value = 0;
    VarList* next = 0;
};

/**
 * Set the variable with 'name' to 'value'. If a variable with 'name' already
 * exists, it's overwritten. Otherwise the new variable is appended at the end.
 */
VarList* template_set(VarList* vars, const char* name, const char* value);

/**
 * Merges the 'extended' list of variables into the 'base' list of variables and
 * returns a pointer to a new VarList that contains the merged set of the two.
 * If a name exists in both base and extended, the value will be overwritten by
 * the value in 'extended'.
 *
 * It's up to the caller to free the memory of the returned VarList list.
 */
VarList* template_merge(VarList* base, VarList* extended);

/** Goes through the list of variables and calls string_free() on each name and value. */
void template_free(VarList* vars);

/**
 * Search through the template variables, stopping once a variable with 'name' has
 * been found and returns the corresponding value.
 * Returns 0 if no variable with 'name' was found.
 */
String template_get(VarList* vars, const char* name);

/**
 * Returns the template with variables substituted using values from the variable set.
 */
String template_render(String template_string, VarList* vars);

/**
 * Returns a string with an autogenerated usage string for the template string.
 */
String template_generate_usage(String template_string, const char* action_name);
